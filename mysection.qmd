# Introduction to matplotlib


## Introduction

The matplotlib library can provide methods in plotting and arranging data visually in order to help viewers understand the main concepts of the data analysis.
In this chapter, a progression of graphs will be shown to demonstrate some of the capabilities the library has to graph and plot data.

## How to Use

The library is not part of the defaults used in Python. To install, use either pip or Anaconda.

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(8465);

x = np.random.uniform(0,3,10);
y = np.random.uniform(0,3,10);
z = np.random.uniform(0,3,10);

plt.scatter(x,y)
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

```

We could start plotting another plot, but we have not saved our scatterplot as an object. Thus, it will get overridden by whatever we plot next.
If we want to keep a plot, we can save as a figure object. In addition, if we need multiple plots together, we can use a subplot shown as follows.

```{python}

fig,(ax,ax1) = plt.subplots(1,2,figsize = (4,3))

ax.plot(x,z,label = "Line Graph")
ax1.scatter(x,y,z,label = "Scatter in 3D")
ax.legend()
ax1.legend()
plt.show()
```

## Animation

Animations can also be done through matplotlib. This requires the use of the animation submodule which has a variety functions that can be used to plot animations.
Inputs required include the frames and other functions needed to update the plots per frame.

## Conclusion

We have demonstrated some capabilities of the matplotlib library but more complex methods of plotting and arranging visual elements can be found in the documentation.
