[
  {
    "objectID": "mysection.html#introduction",
    "href": "mysection.html#introduction",
    "title": "6  Introduction to matplotlib",
    "section": "6.1 Introduction",
    "text": "6.1 Introduction\nThe matplotlib library can provide methods in plotting and arranging data visually in order to help viewers understand the main concepts of the data analysis. In this chapter, a progression of graphs will be shown to demonstrate some of the capabilities the library has to graph and plot data.\nThere are several types of graphs that can be used, such as:\n1. Scatterplot\n2. Line plot\n3. 3D plot"
  },
  {
    "objectID": "mysection.html#how-to-use",
    "href": "mysection.html#how-to-use",
    "title": "6  Introduction to matplotlib",
    "section": "6.2 How to Use",
    "text": "6.2 How to Use\nThe library is not part of the defaults used in Python. To install, use either pip or Anaconda. The following command should be used:\n\n#pip install matplotlib\n\nIf the above does not work, then you would need the path of pip or Python to put before the command.\n\n6.2.1 Examples\nLet’s start with a simple scatter plot. We would need to import the libraries as shown. For this example, we use the pyplot submodule, abbreviated to plt. We will use randomly generated data in 3 dimensions (x,y,z).\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(8465);\n\nx = np.random.uniform(0,3,10);\ny = np.random.uniform(0,3,10);\nz = np.random.uniform(0,3,10);\n\nplt.scatter(x,y)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()\n\n\n\n\nWe could start plotting another plot, but we have not saved our scatterplot as an object. Thus, it will get overridden by whatever we plot next. If we want to keep a plot, we can save as a figure object. In addition, if we need multiple plots together, we can use a subplot shown as follows.\n\nfig,(ax,ax1) = plt.subplots(1,2,figsize = (8,6))\n\nax.scatter(y,z,marker = '^')\nax1.scatter(x,y,color = 'red')\n\nplt.show()\n\n\n\n\nWe can also do 3d plots alongside 2d, but we need a different function in order to do so. The following uses 3d axes to plot the scatterplot.\n\nfig = plt.figure()\n\n# Make 3D axes for ax1\n\nax1 = fig.add_subplot(122,projection = '3d')\nax = fig.add_subplot(121)\n\n# Plot\n\nax.plot(x,z,label = \"Line Graph\")\nax1.scatter(x,y,z,c = z,cmap = 'cool',label = \"Scatter in 3D\")\nax.legend()\nax1.legend()\nplt.show()"
  },
  {
    "objectID": "mysection.html#sub-topic-2",
    "href": "mysection.html#sub-topic-2",
    "title": "6  Introduction to matplotlib",
    "section": "6.3 Sub Topic 2",
    "text": "6.3 Sub Topic 2\nPut materials on topic 2 here."
  },
  {
    "objectID": "mysection.html#conclusion",
    "href": "mysection.html#conclusion",
    "title": "6  Introduction to matplotlib",
    "section": "6.4 Conclusion",
    "text": "6.4 Conclusion\nWe have demonstrated some capabilities of the matplotlib library but more complex methods of plotting and arranging visual elements can be found in the documentation."
  },
  {
    "objectID": "mysection.html#animation",
    "href": "mysection.html#animation",
    "title": "6  Introduction to matplotlib",
    "section": "6.3 Animation",
    "text": "6.3 Animation\nAnimations can also be done through matplotlib. This requires the use of the animation submodule which has a variety functions that can be used to plot animations. Inputs required include the frames and other functions needed to update the plots per frame.\n\nimport matplotlib.animation as animation\n\ndef updatept(self):\n    z = 10;\n\nWe can use the FuncAnimation(args,updatept(),frames) to update."
  }
]