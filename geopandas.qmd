---
title: "Introduction to GeoPandas"
author: "Kaitlyn Bedard"
format:
  html:
    code-fold: true
execute:
  warning: false
  error: false
jupyter: python3
---

## Introduction
GeoPandas is a python library created as an extension of pandas to offer support for geographic data. 
Like pandas, GeoPandas has a series type and a dataframe type: `GeoSeries` and `GeoDataFrame`. It 
allows users to do work that would otherwise need a GIS database. Note that since GeoPandas is an 
extension of Pandas, it inherits all its attributes and methods. Please review the pandas presentations 
for information on these tools, if needed. 

## Installation
You can install GeoPandas using the below commands in terminal. The documentation recommends the first method.

`conda install -c conda-forge geopandas`

`conda install geopandas`

`pip install geopandas`

## Basic Concepts
The GeoPandas `GeoDataFrame` is essentially a pandas dataframe that supports typical data, however, 
it also supports geometries. Though the dataframe can have multiple geometry columns, there is one 
"active" column on which all operations are applied to. 

The types of geometries are:

* Points: coordinates

* Lines: set of two coordinates

* Polygons: list of coordinate tuples, first and last must be the same (closed shape)

These geometries are often represented by `shapely.geometry` objects. Note, we can also have multi-points, 
multi-lines, and multi-polygons. Below are examples of creating these geometries using shapely. Each 
GeoSeries has a specified CRS (Coordinate Reference System) that stores information about the data. 
```{python}
from shapely.geometry import LineString, Point, Polygon
import geopandas as gpd

# point example
point = Point(0.5, 0.5)
gdf1 = gpd.GeoDataFrame(geometry=[point])

# line example
line = LineString([(0, 0), (1, 1)])
gdf2 = gpd.GeoDataFrame(geometry=[line])

# polygon example
polygon = Polygon([(0, 0), (0, 1), (1, 1), (1, 0), (0, 0)])
gdf3 = gpd.GeoDataFrame(geometry=[polygon])
```

The following are some examples of basic attributes of a GeoSeries:

* `length`: returns the length of a line

```{python}
gdf2.length
```

* `area`: returns the area of the shape

```{python}
gdf3.area
```

* `bounds`: gives the bounds of each row in a geometry column

* `total_bounds`: gives the total bounds of a geometry series

* `geom_type`: gives the geometry type 

```{python}
gdf3.geom_type
```

* `is_valid`: returns True for valid geometries and False otherwise

Below are some examples of basic methods that can be applied to a GeoSeries:

* `distance()`: returns the (minimum) distance of each row of a geometry to a specified paramater
    + parameter `other`: can be a single geometry, or an entire geometry series
    + parameter `align`: True if you want to align GeoSeries by index, false otherwise

```{python}
gdf2.distance(Point((1,0)))
```

* `centroid`: returns a new GeoSeries with the centers of each row in the geometry

```{python}
gdf3.centroid
```

Below are examples of some relationship tests that can be applied to a GeoSeries:

* `contains()`: returns true if shape contains a specified `other`
    + parameter `other`: can be a single geometry, or an entire geometry series
    + parameter `align`: True if you want to align GeoSeries by index, false otherwise

```{python}
gdf3.contains(gdf1)
```

* `intersects()`: returns true if shape intersects a specified `other`
    + parameter `other`: can be a single geometry, or an entire geometry series
    + parameter `align`: True if you want to align GeoSeries by index, false otherwise

```{python}
gdf2.intersects(gdf3)
```

## Reading Files
If you have a file that contains data and geometry information, you can read it directly 
with geopandas using the `geopandas.read_file()` command. Examples of these files are GeoPackage, 
GeoJSON, Shapefile. However, we can convert other types of files to a GeoDataFrame. For example, 
we can transform the NYC crash data. The below code creates a point geometry. The points are the 
coordinates of the crashes. 
```{python}
# Reading csv file 
import pandas as pd 
import numpy as np
# Shapely for converting latitude/longtitude to geometry
from shapely.geometry import Point 
# To create GeodataFrame
import geopandas as gpd 

jan23 = pd.read_csv('data/nyc_crashes_202301.csv')
# replacing all 0.0 coordinates with NaN
jan23_cleaning = jan23.copy()
jan23_cleaning["LATITUDE"] = jan23["LATITUDE"].replace([0.0], np.nan)
jan23_cleaning["LONGITUDE"] = jan23["LONGITUDE"].replace([0.0], np.nan)
jan23_cleaning.head()

# creating geometry using shapely (removing empty points)
geometry = [Point(xy) for xy in zip(jan23_cleaning["LONGITUDE"], jan23_cleaning["LATITUDE"]) if not Point(xy).is_empty]

# creating geometry column to be used by geopandas
geometry2 = gpd.points_from_xy(jan23["LONGITUDE"], jan23["LATITUDE"])

# coordinate reference system (epsg:4326 implies that data is geographic coordinates)
crs = {'init': 'epsg:4326'}

# create Geographic data frame (removing rows with missing coordinate information)
jan23_gdf = gpd.GeoDataFrame(jan23_cleaning.loc[~pd.isna(jan23_cleaning["LATITUDE"]) & ~pd.isna(jan23_cleaning["LONGITUDE"])], 
                             crs=crs, 
                             geometry=geometry)

jan23_gdf.head()
```

## Plotting
We can easily plot our data now that has been transformed to a geometric data frame. 
```{python}
# Basic Plot
jan23_gdf.plot()
# Color the plot by borough
jan23_gdf.plot(column = 'BOROUGH',legend=True)

# Color the plot by number persons injuried
jan23_gdf.plot(column = 'NUMBER OF PERSONS INJURED',legend=True, cmap= "OrRd")

# Plotting missing information 
jan23_gdf.plot(column='BOROUGH', missing_kwds={'color': 'lightgrey'})
```

## Interactive Maps
We can also easily create an interactive plot, using `.explore()`.
```{python}
# interactive map of just the latitude and longitude points
jan23_gdf.explore()

# interactive map where points are colored by borough
jan23_gdf.explore(column='BOROUGH',legend=True)

# interative map that plots the crashes where 1 or more persons are killed
jan23_gdf_edit = jan23_gdf.copy()
jan23_gdf_edit = jan23_gdf[jan23_gdf["NUMBER OF PERSONS KILLED"] > 0]
jan23_gdf_edit.explore(column='NUMBER OF PERSONS KILLED',  style_kwds={'radius': 7})
```

# Setting and Changing Projections
Earlier, we showed how to set a CRS using `crs = {'init': 'epsg:4326'}`. However, 
the CRS can also be set using the `.set_crs` function on GeoDataFrame that does not 
yet have a defined CRS. Going back to our first example, `gdf1`, we can set the CRS 
as follows.

```{python}
gdf1 = gdf1.set_crs("EPSG:4326")
gdf1.plot()
```

We can also change the CRS of a geometry using the `.to_crs()` function. Some options are:

* EPSG:3395 - World Mercator system

* ESPG:4326 - Standard Coordinates

* EPSG:2163 - NAD83, a system for the US and Canada

Note that 4326 is the most common.

## Merging Data
Below, I will import NYC Borough data set from NYC Open data, and perform a merge with the NYC crash data.
GeoPandas allows for spatial joining. To merge the data, we see which borough (based on the NYC Borough geometry) 
contains each point in the NYC crash data. In this example, we keep the geometry of the borough data, but this 
can be easily altered. Notice that this acted to 'geocode' the borough name of each point in the NYC crash 
data, so one could omit this `'BOROUGH'` column from the crash data to avoid redundancy.
```{python}
import geopandas as gpd

# import NYC Borough Data
boros = gpd.read_file("data/nyc_boroughs.geojson")
boros.set_crs("EPSG:4326")
boros.head()

# merge the borough data with the crash data
boro_merge= boros.sjoin(jan23_gdf, op='contains')
boro_merge.head()
```
I do the same as above, but with NYC zip code data.
```{python}
# import NYC Zip Code Data
zipcodes = gpd.read_file("data/nyc_zipcodes.geojson")
zipcodes.set_crs("EPSG:4326")
zipcodes.head()

# merge the zipcode data with the crash data
zip_merge= zipcodes.sjoin(jan23_gdf, op='contains')
zip_merge.head()

```

## Merge Demonstrations
I will demonstrate some more tools using the NYC Borough data, NYC Zip Code data, 
NYC Crash Data, and the merged data sets. 

For example, we can overlay plots.
```{python}
base = boros.plot(color='white', edgecolor='black')

jan23_gdf.plot(ax=base, marker='o', color='red', markersize=5)
```

We can also plot the borough data based on the number of people killed, for example. First, 
compute the average number of injuries per borough. Then merge the averages into the borough 
data frame, and plot accordingly.

```{python}
# Compute the average number of deaths per borough
avg_deaths_per_boro = boro_merge.groupby('boro_name')['NUMBER OF PERSONS KILLED'].mean()

# Merge the average deaths per borough back into the borough GeoDataFrame
boros = boros.merge(avg_deaths_per_boro, on='boro_name', suffixes=('', '_mean'))
boros.head()

# plot 
boros.plot(column = "NUMBER OF PERSONS KILLED", legend = True)
```

We can follow this same process to plot the average number of injuries on the zip code level.
```{python}
# Compute the average number of injuries per zipcode
avg_injuries_per_zip = zip_merge.groupby('ZIPCODE')['NUMBER OF PERSONS INJURED'].mean()

# Merge the average injuries per zip back into the zipcodes GeoDataFrame
zipcodes = zipcodes.merge(avg_injuries_per_zip, on='ZIPCODE', suffixes=('', '_mean'))
zipcodes.head()

# plot 
zipcodes.explore(column = "NUMBER OF PERSONS INJURED", legend = True)
```

We can also plot the number of crashes by zip code (or borough) as well. See the below code:
```{python}
# count the number of crashes per zipcode
crash_count_by_zipcode = zip_merge.groupby('ZIPCODE')['CRASH DATE'].count().reset_index()

# merge the count with the zipcodes data frame
zipcodes_with_crash_count = zipcodes.merge(crash_count_by_zipcode, on='ZIPCODE')

# plot 
zipcodes_with_crash_count.plot(column='CRASH DATE', cmap='OrRd', legend=True)
```

## Resources

For more information see the following: 

* GeoPandas Documentation
    + <https://geopandas.org/en/stable/docs.html>

* NYC Borough Data
    + <https://data.cityofnewyork.us/City-Government/Borough-Boundaries/tqmj-j8zm>

* NYC Zip Code Data
    + < https://data.beta.nyc/en/dataset/nyc-zip-code-tabulation-areas/resource/894e9162-871c-4552-a09c-c6915d8783fb>
